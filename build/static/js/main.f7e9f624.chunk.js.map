{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","user","wallet","systemProgram","programId","signers","useEffect","addEventListener","useCallback","account","fetch","className","onClick","type","placeholder","onChange","map","item","index","src","gifLink","alt","style","color","userAddress","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7e9f624.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useState, useCallback } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\nimport kp from './keypair.json'\n// import BN from 'bn.js';\n\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, \n  // Keypair \n} = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n\n// Set our network to devent.\nconst network = clusterApiUrl(\"devnet\");\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n// Change this up to be your Twitter if you want.\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const [walletAddress, setWalletAddress] = useState(null);\n  //   const TEST_GIFS = [\n  //   \"https://media.giphy.com/media/v6pq4tpc17rwJ5YtJu/giphy.gif\",\n  //   \"https://media.giphy.com/media/Lg1FRCgJFwb7RfGuJX/giphy.gif\",\n  //   \"https://media.giphy.com/media/zHoydr6ZjJC0zKKhl9/giphy.gif\",\n  //   \"https://media.giphy.com/media/A3556xyE9eMyE7ETv2/giphy.gif\",\n  // ];\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          /*\n           * The solana object gives us a function that will allow us to connect\n           * directly with the user's wallet!\n           */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n  \n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"GIF sucesfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  // const sendGif = async () => {\n  //   if (inputValue.length > 0) {\n  //     console.log(\"Gif link:\", inputValue);\n  //   } else {\n  //     console.log(\"Empty input. Try again.\");\n  //   }\n  // };\n\n  // const upvoteGif = async (index) => {\n  //   console.log('Upvote: ', index);\n  //   try {\n  //     const provider = getProvider();\n  //     const program = new Program(idl, programID, provider);\n\n  //     await program.rpc.upvoteGif(new BN(index.toString()), {\n  //       accounts: {\n  //         baseAccount: baseAccount.publicKey,\n  //         user: provider.wallet.publicKey,\n  //       },\n  //     });\n  //     console.log('Gif upvoted', index);\n\n  //     await getGifList();\n  //   } catch (error) {\n  //     console.log('Error upvoting GIF:', error);\n  //   }\n  // };\n  \n  // const downvoteGif = async (index) => {\n  //   try {\n  //     const provider = getProvider();\n  //     const program = new Program(idl, programID, provider);\n\n  //     await program.rpc.downvoteGif(new BN(index.toString()), {\n  //       accounts: {\n  //         baseAccount: baseAccount.publicKey,\n  //         user: provider.wallet.publicKey,\n  //       },\n  //     });\n  //     console.log('Gif downvoted', index);\n\n  //     await getGifList();\n  //   } catch (error) {\n  //     console.log('Error downvoting GIF:', error);\n  //   }\n  // };\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't be initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n            Submit\n          </button>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} alt={item.gifLink} />\n                <div className='gif-item-info'>\n                  <div style={{color: \"white\"}}>Submitted by: {item.userAddress.toString()}</div>\n                  {/* <div>Upvotes: {item.upvotes.toString()}</div>\n                  <div>Downvotes: {item.downvotes.toString()}</div> */}\n                </div>\n                {/* <div className='button-group'>\n                  <button\n                    className={`cta-button upvote-gif-button ${\n                      item.upvoters.some((it) => it.toString() === walletAddress) &&\n                      'upvote-gif-button-active'\n                    }`}\n                    onClick={() => upvoteGif(index)}\n                  >\n                    Upvote\n                  </button>\n                  <button\n                    className={`cta-button downvote-gif-button ${\n                      item.downvoters.some((it) => it.toString() === walletAddress) &&\n                      'downvote-gif-button-active'\n                    }`}\n                    onClick={() => downvoteGif(index)}\n                  >\n                    Downvote\n                  </button>\n                </div> */}\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    window.addEventListener(\"load\", async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  const getGifList = useCallback(async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifs: \", error);\n      setGifList(null);\n    }\n  });\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  // const getGifList = useCallback(async () => {\n  //   try {\n  //     const provider = getProvider();\n  //     const program = new Program(idl, programID, provider);\n  //     const account = await program.account.baseAccount.fetchNullable(\n  //       baseAccount.publicKey\n  //     );\n\n  //     if (!account) {\n  //       return;\n  //     }\n\n  //     console.log(\"Got the account\", account);\n  //     setGifList(account.gifList);\n  //   } catch (error) {\n  //     console.log(\"Error in getGifs: \", error);\n  //     setGifList([]);\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress, getGifList]);\n\n  // useEffect(() => {\n  //   if (walletAddress) {\n  //     console.log(\"Fetching GIF list...\");\n\n  //     // Call Solana program here.\n\n  //     // Set state\n  //     setGifList(TEST_GIFS);\n  //   }\n  // }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/*<div className={walletAddress ? 'authed-container' :'container'}></div>*/}\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸŒˆMeme Hub</p>\n          <p className=\"sub-text\">\n            View your Meme collection in the metaverse âœ¨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}